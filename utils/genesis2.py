import random
import textwrap
from datetime import datetime, timezone
import httpx
import re
from typing import List

from .config import settings  # settings.PPLX_API_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
from .message_helper import sentence_end_pattern

# –°–∞–º–∞—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:
PPLX_MODEL = "sonar-pro"
PPLX_API_URL = "https://api.perplexity.ai/chat/completions"
TIMEOUT = 25

headers = {
    "Authorization": f"Bearer {settings.PPLX_API_KEY}",
    "Content-Type": "application/json",
}


def _build_prompt(draft: str, user_prompt: str, language: str) -> list:
    system_msg = textwrap.dedent(
        f"""
        You are GENESIS-2, the intuition filter for Indiana‚ÄêAM ("Indiana Jones" archetype).
        Return ONE short investigative twist (‚â§500 tokens) that deepens the current reasoning.
        Do **NOT** repeat the draft; just add an angle, question or hidden variable.
        Reply in {language}.
        """
    ).strip()
    return [
        {"role": "system", "content": system_msg},
        {"role": "user", "content": f"USER PROMPT >>> {user_prompt}"},
        {"role": "assistant", "content": f"DRAFT >>> {draft}"},
        {"role": "user", "content": "Inject the twist now:"},
    ]


async def _call_sonar(messages: list) -> str:
    payload = {
        "model": PPLX_MODEL,
        "messages": messages,
        "temperature": 0.8,  # —Ä–µ–≥—É–ª–∏—Ä—É–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
        "max_tokens": 500,  # –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å 120 –¥–æ 500
    }
    async with httpx.AsyncClient(timeout=TIMEOUT) as client:
        resp = await client.post(PPLX_API_URL, headers=headers, json=payload)
        try:
            resp.raise_for_status()
        except Exception:
            # –î–µ–±–∞–≥: –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏ API
            print("[Genesis-2] Sonar HTTP error:", resp.text)
            raise
        data = resp.json()
        content = data["choices"][0]["message"]["content"]
        return content.strip()


def split_message(message: str, max_length: int = 4000) -> List[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    """
    if len(message) <= max_length:
        return [message]
    
    parts = []
    current_text = message
    
    while len(current_text) > 0:
        if len(current_text) <= max_length:
            parts.append(current_text)
            break
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∞–±–∑–∞—Ü–∞ –¥–æ max_length
        cut_point = max_length
        last_period = current_text[:cut_point].rfind('. ')
        last_exclamation = current_text[:cut_point].rfind('! ')
        last_question = current_text[:cut_point].rfind('? ')
        last_paragraph = current_text[:cut_point].rfind('\n\n')
        
        end_points = [p for p in [last_period, last_exclamation, last_question, last_paragraph] if p != -1]
        
        if end_points:
            # –ë–µ—Ä–µ–º —Å–∞–º—É—é –¥–∞–ª—å–Ω—é—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞
            cut_point = max(end_points) + 2
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à–µ–π —Ç–æ—á–∫–∏ —Ä–∞–∑—Ä—ã–≤–∞, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª
            last_space = current_text[:cut_point].rfind(' ')
            if last_space != -1:
                cut_point = last_space + 1
        
        parts.append(current_text[:cut_point])
        current_text = current_text[cut_point:]
    
    return parts


async def genesis2_sonar_filter(user_prompt: str, draft_reply: str, language: str) -> str:
    # –ù–µ –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ‚Äî –¥–ª—è "–∂–∏–≤–æ—Å—Ç–∏"
    if random.random() < 0.12 or not settings.PPLX_API_KEY:
        return ""
    try:
        messages = _build_prompt(draft_reply, user_prompt, language)
        twist = await _call_sonar(messages)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—Ä–µ–∑–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not re.search(sentence_end_pattern, twist):
            twist = re.sub(r'\w+$', '...', twist)
        
        return twist
    except Exception as e:
        print(f"[Genesis-2] Sonar fail {e} @ {datetime.now(timezone.utc).isoformat()}")
        return ""


async def assemble_final_reply(user_prompt: str, indiana_draft: str, language: str) -> str:
    twist = await genesis2_sonar_filter(user_prompt, indiana_draft, language)
    if twist:
        final_reply = f"{indiana_draft}\n\nüúÇ Investigative Twist ‚Üí {twist}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(final_reply) > 4000:
            parts = split_message(final_reply)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
            for i in range(len(parts) - 1):
                parts[i] = parts[i] + "\n\n[–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...]"
            
            return parts
        
        return final_reply
    
    return indiana_draft