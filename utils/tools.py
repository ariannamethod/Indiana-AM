import asyncio
import logging
import re
import textwrap
from pathlib import Path

from GENESIS_orchestrator import status_emoji

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


def sanitize_filename(filename: str) -> str:
    """Return a safe filename without path components or suspicious characters."""
    safe_name = Path(filename).name
    safe_name = re.sub(r"[^A-Za-z0-9._-]", "_", safe_name)
    return safe_name or "file"

def split_message(text: str, max_length: int = 4000, preserve_markdown: bool = True):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —É—á–∏—Ç—ã–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É Telegram.
    –°—Ç–∞—Ä–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∞–±–∑–∞—Ü–µ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
    """
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—á–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
    if len(text) <= max_length:
        return [text]

    parts = []
    current_part = ""

    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã Markdown/–∫–æ–¥-–±–ª–æ–∫–æ–≤
    segments = (
        re.split(r"(```.*?```)", text, flags=re.DOTALL)
        if preserve_markdown
        else [text]
    )

    for segment in segments:
        if not segment:
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥-–±–ª–æ–∫–æ–≤ –∫–∞–∫ –Ω–µ–¥–µ–ª–∏–º—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        if preserve_markdown and segment.startswith("```") and segment.endswith("```"):
            if len(current_part + "\n\n" + segment) > max_length and current_part:
                parts.append(current_part.strip())
                current_part = ""

            if len(segment) <= max_length:
                current_part = (
                    current_part + "\n\n" + segment if current_part else segment
                )
            else:
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–¥-–±–ª–æ–∫ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
                lines = segment.splitlines()
                fence = lines[0]
                closing = "```"
                code_lines = lines[1:-1]
                block = []
                for line in code_lines:
                    candidate = "\n".join(block + [line])
                    chunk = f"{fence}\n{candidate}\n{closing}"
                    if len(chunk) > max_length:
                        if block:
                            parts.append(f"{fence}\n{'\n'.join(block)}\n{closing}")
                            block = [line]
                        else:
                            available = max_length - len(fence) - len(closing) - 2
                            wrapped = textwrap.wrap(
                                line,
                                width=available,
                                break_long_words=False,
                                replace_whitespace=False,
                            )
                            for w in wrapped:
                                parts.append(f"{fence}\n{w}\n{closing}")
                            block = []
                    else:
                        block.append(line)
                if block:
                    parts.append(f"{fence}\n{'\n'.join(block)}\n{closing}")
                current_part = ""
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —É—á–∏—Ç—ã–≤–∞—è –∞–±–∑–∞—Ü—ã
            paragraphs = segment.split("\n\n")
            for paragraph in paragraphs:
                if len(paragraph) > max_length:
                    sentences = paragraph.replace('. ', '.<SPLIT>').split('<SPLIT>')
                    for sentence in sentences:
                        if (
                            len(current_part + "\n\n" + sentence) > max_length
                            and current_part
                        ):
                            parts.append(current_part.strip())
                            current_part = sentence
                        else:
                            current_part = (
                                current_part + "\n\n" + sentence
                                if current_part
                                else sentence
                            )

                        if len(current_part) > max_length:
                            wrapped = textwrap.wrap(
                                current_part,
                                width=max_length,
                                break_long_words=False,
                                replace_whitespace=False,
                            )
                            parts.extend([w.strip() for w in wrapped[:-1]])
                            current_part = wrapped[-1].strip()
                else:
                    if (
                        len(current_part + "\n\n" + paragraph) > max_length
                        and current_part
                    ):
                        parts.append(current_part.strip())
                        current_part = paragraph
                    else:
                        current_part = (
                            current_part + "\n\n" + paragraph
                            if current_part
                            else paragraph
                        )

    if current_part:
        parts.append(current_part.strip())

    return parts

async def send_split_message(
    bot,
    chat_id,
    text,
    parse_mode=None,
    delay: float = 0.5,
    preserve_markdown: bool = True,
    **kwargs,
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

    Parameters
    ----------
    delay: float
        –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
    """
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Sending message with length: {len(text)} characters")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    if text and not text[-1] in ['.', '!', '?', ':', ';', '"', ')', ']', '}']:
        logger.warning("Message appears to be cut off mid-sentence")
        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–µ—Ç—Å—è –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º
        text += "..."

    parts = split_message(text, preserve_markdown=preserve_markdown)
    sent_messages = []

    logger.info(f"Split into {len(parts)} parts")

    for i, part in enumerate(parts):
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        if i == 0:
            part = f"‚òùüèª{status_emoji()} " + part.lstrip()

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è/–æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if i < len(parts) - 1:
            part += "\n\n[–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...]"

        try:
            sent = await bot.send_message(chat_id=chat_id, text=part, parse_mode=parse_mode, **kwargs)
            sent_messages.append(sent)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
            if i < len(parts) - 1:
                await asyncio.sleep(delay)
        except Exception as e:
            logger.error(f"Error sending message part {i+1}/{len(parts)}: {str(e)}")
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
                )
            except Exception:
                pass

    return sent_messages[0] if len(sent_messages) == 1 else sent_messages
