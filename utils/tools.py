import asyncio
import logging
import re
from pathlib import Path

from GENESIS_orchestrator import status_emoji

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


def run_background(coro):
    """Run ``coro`` in the background and log exceptions."""
    task = asyncio.create_task(coro)

    def _log_exception(t: asyncio.Task):
        if t.cancelled():
            return
        exc = t.exception()
        if exc:
            logger.error("Background task failed", exc_info=exc)

    task.add_done_callback(_log_exception)
    return task


def sanitize_filename(filename: str) -> str:
    """Return a safe filename without path components or suspicious characters."""
    safe_name = Path(filename).name
    safe_name = re.sub(r"[^A-Za-z0-9._-]", "_", safe_name)
    return safe_name or "file"

def split_message(text: str, max_length: int = 4000):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —É—á–∏—Ç—ã–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É Telegram.
    –°—Ç–∞—Ä–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∞–±–∑–∞—Ü–µ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
    """
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—á–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
    if len(text) <= max_length:
        return [text]

    parts = []
    current_part = ""

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —É—á–∏—Ç—ã–≤–∞—è –∞–±–∑–∞—Ü—ã
    paragraphs = text.split('\n\n')

    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –∞–±–∑–∞—Ü —Å–∞–º –ø–æ —Å–µ–±–µ –¥–ª–∏–Ω–Ω–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –µ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
        if len(paragraph) > max_length:
            sentences = paragraph.replace('. ', '.<SPLIT>').split('<SPLIT>')
            for sentence in sentences:
                if len(current_part + "\n\n" + sentence) > max_length and current_part:
                    parts.append(current_part.strip())
                    current_part = sentence
                else:
                    if current_part:
                        current_part += "\n\n" + sentence
                    else:
                        current_part = sentence

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å —Å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                if len(current_part) > max_length:
                    # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ –º–∞–∫—Å–∏–º—É–º–∞, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                    while len(current_part) > max_length:
                        cut = current_part.rfind(" ", 0, max_length)
                        if cut < 0:
                            cut = max_length
                        parts.append(current_part[:cut].strip())
                        current_part = current_part[cut:].strip()
        else:
            # –ï—Å–ª–∏ —Å —ç—Ç–∏–º –∞–±–∑–∞—Ü–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
            if len(current_part + "\n\n" + paragraph) > max_length and current_part:
                parts.append(current_part.strip())
                current_part = paragraph
            else:
                if current_part:
                    current_part += "\n\n" + paragraph
                else:
                    current_part = paragraph

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
    if current_part:
        parts.append(current_part.strip())

    return parts

async def send_split_message(bot, chat_id, text, parse_mode=None, **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Sending message with length: {len(text)} characters")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    if text and not text[-1] in ['.', '!', '?', ':', ';', '"', ')', ']', '}']:
        logger.warning("Message appears to be cut off mid-sentence")
        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–µ—Ç—Å—è –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º
        text += "..."

    parts = split_message(text)
    sent_messages = []

    logger.info(f"Split into {len(parts)} parts")

    for i, part in enumerate(parts):
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        if i == 0:
            part = f"‚òùüèª{status_emoji()} " + part.lstrip()

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è/–æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if i < len(parts) - 1:
            part += "\n\n[–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...]"

        try:
            sent = await bot.send_message(chat_id=chat_id, text=part, parse_mode=parse_mode, **kwargs)
            sent_messages.append(sent)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
            if i < len(parts) - 1:
                await asyncio.sleep(0.5)
        except Exception as e:
            logger.error(f"Error sending message part {i+1}/{len(parts)}: {str(e)}")
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
                )
            except Exception:
                pass

    return sent_messages[0] if len(sent_messages) == 1 else sent_messages
